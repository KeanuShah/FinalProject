
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity sample_data is
    port(clk, rst                   : in std_logic;
         cpol, cpha, cont, enable   : out std_logic;
         tx_data                    : out std_logic_vector(15 downto 0);
         rx_data                    : in std_logic_vector(15 downto 0);
         busy                       : in std_logic;
         led                        : out std_logic_vector(1 downto 0);
         -- CORDIC Lin ports
         send                       : out std_logic;
         data_send                  : out std_logic_vector(39 downto 0);
         
         -- CORDIC Ang Ports
         send_ang                   : out std_logic;
         data_send_ang              : out std_logic_vector(39 downto 0));
         
end sample_data;

architecture Behavioral of sample_data is

    type state is (CTRL_REG1, OUT_X_G, OUT_Y_G, OUT_Z_G, OUT_X_XL, OUT_Y_XL, OUT_Z_XL, CALC);
    signal curr: state;
    signal address: std_logic_vector(15 downto 0) := (others => '0');
    signal count: std_logic_vector(1 downto 0) := (others => '0');
    signal store: std_logic_vector(7 downto 0);
    signal AX, AY, AZ, LX, LY, LZ: std_logic_vector(31 downto 0);
    signal mag_lin, mag_ang: std_logic_vector(15 downto 0);
begin
    
    cpol <= '1';
    cpha <= '1';
    cont <= '0';
    
    process(clk)
    begin
    
        if rising_edge(clk) then
            if rst = '1' then
                tx_data <= (others => '0');
                curr <= CTRL_REG1;
            else
                led <= (others => '0');
                case (curr) is
                    when CTRL_REG1 =>
                        enable <= '1';
                        tx_data <= "0001000011000000";
                        if busy = '0' then
                            curr <= OUT_X_G;
                            enable <= '0';
                            led(0) <= '1';
                        else
                            curr <= CTRL_REG1;
                        end if;
                    
                    when OUT_X_G =>
                        send <= '0';
                        send_ang <= '0';
                        enable <= '1';
                        if unsigned(count) = 0 then
                            tx_data <= "1001100100000000"; -- x high data
                        else
                            tx_data <= "1001100000000000"; -- x low data
                        end if;
                        
                        if busy = '0' then
                            if unsigned(count) = 0 then
                                enable <= '0';
                                curr <= OUT_X_G;
                                store <= rx_data(7 downto 0);
                                count <= std_logic_vector(unsigned(count) + 1);
                            else
                                enable <= '0';
                                curr <= OUT_Y_G;
                                AX <= std_logic_vector(signed(rx_data(7 downto 0) & store(7 downto 0)) * signed(rx_data(7 downto 0) & store(7 downto 0)));
                                led(1) <= '1';
                                count <= (others => '0');
                            end if;
                        else
                            curr <= OUT_X_G;
                        end if;
                        
                    when OUT_Y_G =>
                        enable <= '1';
                        if unsigned(count) = 0 then
                            tx_data <= "1001101100000000"; -- y high data
                        else
                            tx_data <= "1001101000000000"; -- y low data
                        end if;
                        
                        if busy = '0' then
                            if unsigned(count) = 0 then
                                enable <= '0';
                                curr <= OUT_Y_G;
                                store <= rx_data(7 downto 0);
                                count <= std_logic_vector(unsigned(count) + 1);
                            else
                                enable <= '0';
                                curr <= OUT_Z_G;
                                AY <= std_logic_vector(signed(rx_data(7 downto 0) & store(7 downto 0)) * signed(rx_data(7 downto 0) & store(7 downto 0)));
                                count <= (others => '0');
                            end if;
                        else
                            curr <= OUT_Y_G;
                        end if;
                    
                    when OUT_Z_G =>
                        enable <= '1';
                        if unsigned(count) = 0 then
                            tx_data <= "1001110100000000"; -- z high data
                        else
                            tx_data <= "1001110000000000"; -- z low data
                        end if;
                        
                        if busy = '0' then
                            if unsigned(count) = 0 then
                                enable <= '0';
                                curr <= OUT_Z_G;
                                store <= rx_data(7 downto 0);
                                count <= std_logic_vector(unsigned(count) + 1);
                            else
                                enable <= '0';
                                curr <= OUT_X_XL;
                                AZ <= std_logic_vector(signed(rx_data(7 downto 0) & store(7 downto 0)) * signed(rx_data(7 downto 0) & store(7 downto 0)));
                                count <= (others => '0');
                            end if;
                        else
                            curr <= OUT_Z_G;
                        end if;
                    
                    when OUT_X_XL =>
                        enable <= '1';
                        if unsigned(count) = 0 then
                            tx_data <= "1010100100000000"; -- X lin high data
                        else
                            tx_data <= "1010100000000000"; -- X lin low data
                        end if;
                        
                        if busy = '0' then
                            if unsigned(count) = 0 then
                                enable <= '0';
                                curr <= OUT_X_XL;
                                store <= rx_data(7 downto 0);
                                count <= std_logic_vector(unsigned(count) + 1);
                            else
                                enable <= '0';
                                curr <= OUT_Y_XL;
                                LX <= std_logic_vector(signed(rx_data(7 downto 0) & store(7 downto 0)) * signed(rx_data(7 downto 0) & store(7 downto 0)));
                                count <= (others => '0');
                            end if;
                        else
                            curr <= OUT_X_XL;
                        end if;
                    
                    when OUT_Y_XL =>
                        enable <= '1';
                        if unsigned(count) = 0 then
                            tx_data <= "1010101100000000"; -- Y lin high data
                        else
                            tx_data <= "1010101000000000"; -- Y lin low data
                        end if;
                        
                        if busy = '0' then
                            if unsigned(count) = 0 then
                                enable <= '0';
                                curr <= OUT_Y_XL;
                                store <= rx_data(7 downto 0);
                                count <= std_logic_vector(unsigned(count) + 1);
                            else
                                enable <= '0';
                                curr <= OUT_Z_XL;
                                LY <= std_logic_vector(signed(rx_data(7 downto 0) & store(7 downto 0)) * signed(rx_data(7 downto 0) & store(7 downto 0)));
                                count <= (others => '0');
                            end if;
                        else
                            curr <= OUT_Y_XL;
                        end if;
                    
                     when OUT_Z_XL =>
                        enable <= '1';
                        if unsigned(count) = 0 then
                            tx_data <= "1010110100000000"; -- z lin high data
                        else
                            tx_data <= "1010110000000000"; -- z lin low data
                        end if;
                        
                        if busy = '0' then
                            if unsigned(count) = 0 then
                                enable <= '0';
                                curr <= OUT_Z_XL;
                                store <= rx_data(7 downto 0);
                                count <= std_logic_vector(unsigned(count) + 1);
                            else
                                enable <= '0';
                                curr <= CALC;
                                LZ <= std_logic_vector(signed(rx_data(7 downto 0) & store(7 downto 0)) * signed(rx_data(7 downto 0) & store(7 downto 0)));
                                count <= (others => '0');
                            end if;
                        else
                            curr <= OUT_Z_XL;
                        end if;
                    
                    when CALC =>
                        send <= '1';
                        send_ang <= '1';
                        data_send <= "00000000" & std_logic_vector(unsigned(LX) + unsigned(LY) + unsigned(LZ));
                        data_send_ang <= "00000000" & std_logic_vector(unsigned(AX) + unsigned(AY) + unsigned(AZ));
                        curr <= OUT_X_G;
                        
                    when others =>
                        curr <= CTRL_REG1;
                end case;
            end if;
        end if;
    end process;
end Behavioral;
